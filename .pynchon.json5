//
//  pynchon is a docs-generation tool.
//
//  this config is used implicitly with
//  any direct invocations of the `pynchon` CLI
//  tool, sometimes via `make docs` (which drives the CLI)
{
  // BEGIN: top-level config
  // Everything here is optional.
  // Literals only; no templating please!

  "src_root": "src",

  "pkg_name": "pynchon",

  "docs_root": "docs",

  "plugins": [
    // Plugins that are loaded.
    // Some things are here implicitly,
    // since default plugins are added
    // regardless.  Default providers:
    // `python`, `project`, `git`.  Default
    // namespaces: `gen`, `render`.  Default
    // tools: `json`.

    // Recommended for projects with source-code
      "src", "cicd", "fixme", "todo",



    // Standard if there's a python-project
    "pypi", "python-api", "python-cli",

    // For projects with intermediate representations
    "dot",   // graphviz dot-files
    "jinja", // projects with templated docs

    // For projects management & grooming
    "scaffolding", // a boilerplate-manager

    // Experimental
    "griffe", "f", "cookie-cutter",
    "cookie-cutter", // helpers for cookie-cutter
  ],


  // Global-config.
  // Well-behaved plugins will honor values here
  "globals": {
    "exclude_patterns": [
      ".*[.]pyc",
      ".*_version[.]py",
      "**/tests/fixtures/**",
      "**/build/lib/**",
    ],
  },

  // SourceCode plugin customization.
  "src": {
    "include_patterns": ["**/*.py",],
    "headers": {},
  },

  // END: top-level config
  // BEGIN: plugins-config

  // Hooks plugin customization.
  "hooks":{},

  // Dot (graphviz) plugin customization.
  "dot":{},

  // FixMe plugin customization.
  "fixme": {
    "exclude_patterns": [
       // allows {paths|globs|tmpl}
      // will include `globals.exclude_patterns`
      "**/*.egg-info/**",
      "src/pynchon/plugins/fixme/**",
      "src/pynchon/templates/**",
    ],
  },

  // PythonAPI plugin customization.
  "python-api":{
    "skip_private_methods": true,
    "skip_patterns": [],
  },

  // Scaffolding plugin customization.
  "scaffolding":{
    "exclude_patterns": [
      // includes globals
    ],
    "scaffolds":[
      // list of Scaffolds-objects
      {
        "name": "subproject tox.ini's",
        "pattern": "**/tox.ini",
        "scope":"*",
        "src":"pyproject.toml",
       },
     ],
   },

   // Jinja plugin customization.
   "jinja":{
     "context_vars": {
       // extra context-vars passed for renders
        // allows {tpls|json}
      },

     "filter_includes": [
       // where to load jinja filters from
       // allows {tpls|paths|globs}
     ],

    "exclude_patterns": [
      // files that shouldn't show up in plans
       // allows {tpls|paths|globs}
      "**/{{pynchon.src_root}}/pynchon/templates/**",
    ],

    "template_includes": [
      // paths to load templates from
       // allows {tpls|paths|globs}
      "{{pynchon.docs_root}}/includes",
    ],
  },

  // PyPI plugin customization.
  // This isn't fancy; for now just a provider
  // that holds details that might be used by rendering.
  "pypi": {
    "name":"THE public PyPI"
  },

  // CI/CD plugin customization.
  // This isn't fancy; for now just a provider
  // that holds details that might be used by rendering.
  "cicd": {
    // "url_base": "",
    // "url_build": "",
    "url_deploy": "OVERRIDE",
  },
}
