// pynchon is a docs-generation tool.
//
// This config is used implicitly with any direct invocations
// of the `pynchon` CLI tool, sometimes via `make docs` (which drives the CLI)
{

  // BEGIN: top-level config
  // Everything here is optional.
  // Literals only; no templating please!
  // "src_root": "src",
  "pkg_name": "pynchon",
  // "docs_root": "docs",
  "plugins": [
    // Plugins that are loaded.
    // Default plugins are implicitly here, no need to mention them.
    // Default providers: `python`, `project`, `git`, `globals`
    // Default namespaces: `gen`, `render`.  Default
    // Default tools: `json`.

    // Recommended for projects with source-code
    "docs", "src", "tests", "cicd", "fixme",
    //"todo",

    // Standard if there's a python-project
    "pypi", "python-api", "python-cli",

    // For projects with intermediate representations
    "dot",   // graphviz dot-files
    "jinja", // projects with templated docs

    // For projects management & grooming
    "scaffolding", // a boilerplate-manager

    // Experimental
    "griffe",         // ast tool
    "cookie-cutter",  // helpers for cookie-cutter
  ],


  // Globals plugin.
  // All well-behaved plugins will honor values here, appending
  // these values to whatever is set explicitly for that plugin
  "globals": {
    "exclude_patterns": [
      ".*[.]pyc",
      ".*_version[.]py",
      "**/tests/fixtures/**",
      "**/build/lib/**",
    ],
  },

  // SourceCode plugin customization.
  // This provides find/search tooling, plus file-header generators, etc
  "src": {
    "root": "{{pynchon.root}}/src",
    "include_patterns": ["**/*.py",],
    "headers": {},
  },
  "docs": {
    "root": "{{pynchon.root}}/docs",
  },

  // Tests plugin customization.
  "tests": {
    "root": "{{pynchon.root}}/tests",
    "include_patterns": ["**/*.py",],
  },

  // END: top-level config
  // BEGIN: plugins-config

  // Hooks plugin customization.
  "hooks": {},

  // Dot (graphviz) plugin customization.
  "dot": {
    "output_format": "png",
  },

  // FixMe plugin customization.
  "fixme": {
    "exclude_patterns": [
      // `globals.exclude_patterns` will be appended.
      "**/*.egg-info/**",
      "{{src.root}}/**/fixme/**",
      "{{src.root}}/**/fixme.py",
      "{{src.root}}/**/python/api/**",
      "{{src.root}}/pynchon/annotate.py",
    ],
  },

  // PythonAPI plugin customization.
  // This generates API docs for python-packages
  "python-api":{
    "skip_private_methods": true,
    "skip_patterns": [],
  },

  // Scaffolding plugin customization.
  // This provides ways to synchronize/diff project boilerplate.
  // (Similar to cookie-cutter[], but more simple to use.)
  "scaffolding":{
    "exclude_patterns": [
      // includes globals
    ],
    "scaffolds":[
      // list of Scaffolds-objects
      {
        "name": "subproject tox.ini's",
        "pattern": "**/tox.ini",
        "scope":"*",
        "src":"pyproject.toml",
       },
     ],
   },

   // Jinja plugin customization.
   // Planner for finding/rendering project .j2 files
   "jinja":{
     "context_vars": {
       // extra context-vars passed for renders
        // allows {tpls|json}
      },

     "filter_includes": [
       // where to load jinja filters from
       // allows {tpls|paths|globs}
     ],

    "exclude_patterns": [
      // Describes files that shouldn't show up in plans
      // `globals.exclude_patterns` will be appended.
      "**/{{src.root}}/pynchon/templates/**",
    ],

    "template_includes": [
      // Paths to load includes from.
      // (Used in templates as `{% include .. %}`)
      "{{docs.root}}/includes",
    ],
  },

  // PyPI plugin customization.
  // Provider for details about the PyPI this project uses.
  // (This is only used in rendering docs; `pynchon` does not manage releases.
  // You can probably leave this blank for public PyPI but pynchon's own
  // config has some values just1to ensure the plugin is exercised.)
  "pypi": {
    "name":"THE public PyPI"
  },

  // CI/CD plugin customization.
  // Provider for details about the build server for this project.
  // (This is only used in rendering docs; `pynchon` does not manage builds.)
  "cicd": {
    // "url_base": "",
    // "url_build": "",
    "url_deploy": "OVERRIDE",
  },
}
